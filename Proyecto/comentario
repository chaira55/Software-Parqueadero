import java.util.ArrayList;
import java.util.Date;

public class Servicio {
    private int id;
    private String cliente;
    private float tarifaUso;
    private float saldoTotal;
    private ArrayList<Cliente> clientes;
    private ArrayList<String> serviciosRegistrados;
    private ArrayList<PuntoCargaEV> puntosCargaEV;
    private ArrayList<ServicioAdicional> serviciosAdicionales;

    public Servicio() {
        this.id = 0;
        this.cliente = "";
        this.tarifaUso = 0.0f;
        this.saldoTotal = 0.0f;
        this.clientes = new ArrayList<>();
        this.serviciosRegistrados = new ArrayList<>();
        this.puntosCargaEV = new ArrayList<>();
        this.serviciosAdicionales = new ArrayList<>();
        
    }


    public float getSaldoCliente(String nombreCliente) {
        Cliente cliente = buscarClientePorNombre(nombreCliente);
        if (cliente != null) {
            return cliente.getSaldo();
        } else {
            return 0.0f;
        }
    }
    
    public String getCliente() {
        return cliente;
    }
    
    public float getSaldoTotal() {
        return saldoTotal;
    }

    public ArrayList<Cliente> getClientes() {
        return clientes;
    }
    

    public void agregarCliente(String nombre, String tipoVehiculo, float saldo) {
        int id = generarIdCliente();
        Cliente nuevoCliente = new Cliente(id, nombre, tipoVehiculo, saldo);
        clientes.add(nuevoCliente);
    }
    
    
    private int generarIdCliente() {
        return clientes.size() + 1;
    }
    

    public void registrarServicioLavadoAuto(String nombreCliente, int tipoLavado, Date fecha) {
        Cliente cliente = buscarClientePorNombre(nombreCliente);
        
        if (cliente != null) {
            float costoLavado = calcularCostoLavado(tipoLavado);
        
            if (costoLavado > 0) {
                cliente.actualizarSaldo(costoLavado);
                String servicioRegistrado = "Cliente: " + cliente.getNombre() + ", Tipo de Lavado: " + tipoLavado + ", Fecha: " + fecha.toString() + ", Costo: $" + costoLavado;
                serviciosRegistrados.add(servicioRegistrado);
            } else {
                System.out.println("Tipo de lavado no válido: " + tipoLavado);
            }
        } else {
            System.out.println("Cliente no encontrado: " + nombreCliente);
        }
    }
    
    
    
    private Cliente buscarClientePorNombre(String nombreCliente) {
        for (Cliente cliente : clientes) {
            if (cliente.getNombre().equals(nombreCliente)) {
                return cliente;
            }
        }
        return null;
    }
    
    public void actualizarSaldo(float costo) {
        saldo += costo;
    }
    

    public float calcularCostoLavado(int tipoLavado) {
        float costo = 0.0f;
    
        switch (tipoLavado) {
            case 1: // Lavado básico
                costo = 25000.0f;
                break;
            case 2: // Lavado completo
                costo = 78000.0f;
                break;
            default:
                System.out.println("Tipo de lavado no válido: " + tipoLavado);
        }
    
        return costo;
    }    
    
     public void crearPuntoCargaEV(String ubicacion, int capacidad) {
        PuntoCargaEV nuevoPuntoCarga = new PuntoCargaEV(ubicacion, capacidad);
        puntosCargaEV.add(nuevoPuntoCarga);
    }

    public void actualizarPuntoCargaEV(String ubicacion, boolean ocupado) {
        PuntoCargaEV puntoCarga = buscarPuntoCargaEV(ubicacion);
    
        if (puntoCarga != null) {
            if (ocupado) {
                if (!puntoCarga.isOcupado()) {
                    puntoCarga.ocuparEspacio();
                }
            } else {
                if (puntoCarga.isOcupado()) {
                    puntoCarga.desocuparEspacio();
                }
            }
        }
    }

    public void eliminarPuntoCargaEV(String ubicacion) {
        PuntoCargaEV puntoCarga = buscarPuntoCargaEV(ubicacion);
    
        if (puntoCarga != null) {
            while (puntoCarga.getEspaciosOcupados() > 0) {
                puntoCarga.desocuparEspacio();
            }
    
            puntosCargaEV.removeIf(p -> p.getUbicacion().equals(ubicacion));
        }
    }
    
    public void registrarCargaAuto(String nombreCliente, String ubicacion) {
        Cliente cliente = buscarClientePorNombre(nombreCliente);
        PuntoCargaEV puntoCarga = buscarPuntoCargaEV(ubicacion);
    
        if (cliente != null && puntoCarga != null && !puntoCarga.isOcupado()) {
            this.tarifaUso = 125000.0f;
            puntoCarga.setOcupado(true);
            float costoCarga = 125000.0f;
            cliente.actualizarSaldo(costoCarga);
            String servicioRegistrado = "Cliente: " + nombreCliente + ", Carga de Auto en: " + ubicacion + ", Costo: $" + costoCarga;
            serviciosRegistrados.add(servicioRegistrado);
        } else {
            System.out.println("No se pudo registrar la carga de auto en: " + ubicación);
        }
    }
    
    public ArrayList<PuntoCargaEV> consultarPuntosCargaEVDisponibles() {
        ArrayList<PuntoCargaEV> puntosDisponibles = new ArrayList<>();
        
        for (PuntoCargaEV puntoCarga : puntosCargaEV) {
            if (puntoCarga.getEspaciosOcupados() < puntoCarga.getCapacidad()) {
                puntosDisponibles.add(puntoCarga);
            }
        }
        
        return puntosDisponibles;
    }

    public boolean asignarPuntoCargaEV(String nombreCliente, String ubicacion) {

        Cliente cliente = buscarClientePorNombre(nombreCliente);
    
        if (cliente != null) {
            PuntoCargaEV puntoCarga = buscarPuntoCargaEV(ubicacion);
    
            if (puntoCarga != null && !puntoCarga.isOcupado()) {
                puntoCarga.ocuparEspacio();
                float costoCarga = 125000.0f;
                cliente.actualizarSaldo(costoCarga);
                return true;
            }
            return false; // Punto de carga no encontrado o ocupado
        } else {
            System.out.println("Cliente no encontrado: " + nombreCliente);
            return false;
        }
    }
*/


    public boolean desocuparPuntoCargaEV(String nombreCliente, String ubicacion) {
        Cliente cliente = buscarClientePorNombre(nombreCliente);
    
        if (cliente != null) {
            PuntoCargaEV puntoCarga = buscarPuntoCargaEV(ubicacion);
    
            if (puntoCarga != null && puntoCarga.getEspaciosOcupados() > 0) {
                puntoCarga.desocuparEspacio();
                float costoCarga = -125000.0f; // Negativo para restar el costo
                cliente.actualizarSaldo(costoCarga);
                return true;
            }
            return false; // Punto de carga no encontrado o sin espacios ocupados
        } else {
            System.out.println("Cliente no encontrado: " + nombreCliente);
            return false;
        }
    }
    
    public void crearServicioAdicional(String nombreCliente, int opcion) {
        Cliente cliente = buscarClientePorNombre(nombreCliente);

        if (cliente != null) {
            ServicioAdicional nuevoServicioAdicional = null;

            switch (opcion) {
                case 1: // encerar auto
                    nuevoServicioAdicional = new ServicioAdicional(id, nombreCliente, 50000.0f);
                    break;
                case 2: // descontaminación
                    nuevoServicioAdicional = new ServicioAdicional(id, nombreCliente, 35000.0f);
                    break;
                case 3: // aromatización
                    nuevoServicioAdicional = new ServicioAdicional(id, nombreCliente, 28000.0f);
                    break;
                case 4: // cambio de aceite
                    nuevoServicioAdicional = new ServicioAdicional(id, nombreCliente, 76000.0f);
                    break;
                default:
                    System.out.println("Opción no válida para actualizar la tarifa de uso.");
                    return;
            }

            if (nuevoServicioAdicional != null) {
                serviciosAdicionales.add(nuevoServicioAdicional);
                cliente.actualizarSaldo(nuevoServicioAdicional.getTarifaUso());
                System.out.println("Servicio Adicional:\n ID " + id + ", Nombre " + nombreCliente + ", Costo: $" + nuevoServicioAdicional.getTarifaUso());
            }
        } else {
            System.out.println("Cliente no encontrado: " + nombreCliente);
        }
    }

    public void actualizarServicioAdicional(String nombreSA, float tarifaUso) {
        for (ServicioAdicional sa : serviciosAdicionales) {
            if (sa.getNombre() == nombreSA) {
                sa.setTarifaUso(tarifaUso);
            }
        }
    }

    public void eliminarServicioAdicional(String nombreCliente, int id) {
        Cliente cliente = buscarClientePorNombre(nombreCliente);

        if (cliente != null) {
            serviciosAdicionales.removeIf(sa -> sa.getId() == id);
            // Ajustar el saldo del cliente según sea necesario
        }
    }

    public ServicioAdicional consultarServicioAdicional(int id) {
        for (ServicioAdicional sa : serviciosAdicionales) {
            if (sa.getId() == id) {
                return sa;
            }
        }
        return null;
    }

    public void registrarServicioAdicional(String nombreCliente, int idServicioAdicional) {
        Cliente cliente = buscarClientePorNombre(nombreCliente);
        ServicioAdicional servicioAdicional = consultarServicioAdicional(idServicioAdicional);

        if (cliente != null && servicioAdicional != null) {
            // Registrar el servicio adicional y ajustar el saldo del cliente
            String servicioRegistrado = "Cliente: " + nombreCliente + ", Servicio Adicional: " + servicioAdicional.getNombre() + ", Costo: $" + servicioAdicional.getTarifaUso();
            serviciosRegistrados.add(servicioRegistrado);
            cliente.actualizarSaldo(servicioAdicional.getTarifaUso());
        } else {
            System.out.println("Cliente o servicio adicional no válido: " + nombreCliente + " - " + idServicioAdicional);
        }
    }

    public void cancelarServicio(String nombreCliente, String descripcion) {
    Cliente cliente = buscarClientePorNombre(nombreCliente);
    RegistroServicio servicioAEliminar = null;

    if (cliente != null) {
        for (RegistroServicio servicio : serviciosRegistrados) {
            if (servicio.getCliente().equals(nombreCliente) && servicio.getDescripcion().equals(descripcion)) {
                servicioAEliminar = servicio;
                break;
            }
        }
        
        if (servicioAEliminar != null) {
            serviciosRegistrados.remove(servicioAEliminar);
            cliente.actualizarSaldo(-servicioAEliminar.getCosto()); // Restar el costo al saldo
            System.out.println("Servicio cancelado: " + descripcion);
        } else {
            System.out.println("El servicio no se encontró en los registros: " + descripcion);
        }
    } else {
        System.out.println("Cliente no encontrado: " + nombreCliente);
    }
}
   
}


class PuntoCargaEV {
    private String ubicacion;
    private int capacidad;
    private int espaciosOcupados;

    public PuntoCargaEV(String ubicacion, int capacidad) {
        this.ubicacion = ubicacion;
        this.capacidad = capacidad;
        this.espaciosOcupados = 0;
    }

    public String getUbicacion() {
        return ubicacion;
    }

    public int getCapacidad() {
        return capacidad;
    }

    public int getEspaciosOcupados() {
        return espaciosOcupados;
    }

    public boolean isOcupado() {
        return espaciosOcupados >= capacidad;
    }

    public void ocuparEspacio() {
        if (espaciosOcupados < capacidad) {
            espaciosOcupados++;
        }
    }

    public void desocuparEspacio() {
        if (espaciosOcupados > 0) {
            espaciosOcupados--;
        }
    }
}



class ServicioAdicional {
    private int id;
    private String nombre;
    private float tarifaUso;
    public Object mostrarSaldo;

    private static ArrayList<ServicioAdicional> serviciosAdicionales = new ArrayList<>();

    public ServicioAdicional(int id, String nombre, float tarifaUso) {
        this.id = id;
        this.nombre = nombre;
        this.tarifaUso = tarifaUso;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public float getTarifaUso() {
        return tarifaUso;
    }

    public void setTarifaUso(float tarifaUso) {
        this.tarifaUso = tarifaUso;
    }
}

class RegistroServicio {
    private String cliente;
    private String descripcion;
    private float costo;

    public RegistroServicio(String cliente, String descripcion, float costo) {
        this.cliente = cliente;
        this.descripcion = descripcion;
        this.costo = costo;
    }

    public String getCliente() {
        return cliente;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public float getCosto() {
        return costo;
    }
}

class Cliente {
    private int id;
    private String nombre;
    private String tipoVehiculo;
    private float saldo;

    public Cliente(int id, String nombre, String tipoVehiculo, float saldo) {
        this.id = id;
        this.nombre = nombre;
        this.tipoVehiculo = tipoVehiculo;
        this.saldo = saldo;
    }

    public int getId() {
        return id;
    }

    public String getNombre() {
        return nombre;
    }

    public String getTipoVehiculo() {
        return tipoVehiculo;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public void setTipoVehiculo(String tipoVehiculo) {
        this.tipoVehiculo = tipoVehiculo;
    }

    public float getSaldo() {
        return saldo;
    }

    public void setSaldo(float saldo) {
        this.saldo = saldo;
    }

}

